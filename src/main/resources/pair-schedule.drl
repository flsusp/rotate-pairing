package br.com.rotatepairing;

import br.com.rotatepairing.Pair;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

global HardSoftScoreHolder scoreHolder;

// -- Pairing consistency hard constraints

rule "nonNullPilot"
    when
        Pair(pilot == null);
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

rule "avoidRepeatedPilotAsCopilot"
    when
        Pair(pilot==copilot)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

rule "avoidRepeatedPersonAsPilot"
    when
        $pair1 : Pair($pilot:pilot)
        Pair(pilot==$pilot,this!=$pair1)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

rule "avoidRepeatedPersonAsCopilot"
    when
        $pair1 : Pair($copilot:copilot)
        Pair(copilot==$copilot,this!=$pair1)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

rule "avoidRepeatedPilotAsCopilotInOtherPair"
    when
        $pair1 : Pair($pilot:pilot)
        Pair(copilot==$pilot,this!=$pair1)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

rule "avoidRepeatedCopilotAsPilotInOtherPair"
    when
        $pair1 : Pair($copilot:copilot)
        Pair(pilot==$copilot,this!=$pair1)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, -10000, -1000);
end

// -- Desireable soft constraints

rule "nonNullCopilot"
    when
        Pair(pilot!=copilot,copilot!=null);
    then
        scoreHolder.addSoftConstraintMatch(kcontext, +10);
end

rule "pairingAffinityPilotCopilot"
    when
        Pair($pilot:pilot,$copilot:copilot)
        $affinity : PairAffinity(firstPerson==$pilot,secondPerson==$copilot)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $affinity.getNormalizedScore());
end

rule "pairingAffinityCopilotPilot"
    when
        Pair($pilot:pilot,$copilot:copilot)
        $affinity : PairAffinity(firstPerson==$copilot,secondPerson==$pilot)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $affinity.getNormalizedScore());
end

rule "roleAffinityPilot"
    when
        Pair($pilot:pilot,$role:role)
        $affinity : RoleAffinity(person==$pilot,role==$role)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $affinity.getNormalizedScore());
end

rule "roleAffinityCopilot"
    when
        Pair($copilot:copilot,$role:role)
        $affinity : RoleAffinity(person==$copilot,role==$role)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $affinity.getNormalizedScore());
end
